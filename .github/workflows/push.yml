name: build

on:
  push:
    branches:
      - main
      - master

env:
  AWS_REGION: ap-northeast-2
  AWS_ROLE_ARN: "arn:aws:iam::968005369378:role/next-auth-example"

  PLATFORM: linux/amd64 # ,linux/arm64

  ECR_URI: "968005369378.dkr.ecr.ap-northeast-2.amazonaws.com/nalbam/next-auth-example:latest"

  NODE_ENV: production

# Permission can be added at job level or workflow level
permissions:
  id-token: write   # This is required for requesting the JWT
  contents: write   # This is required for actions/checkout

jobs:
  build:
    runs-on: ubuntu-24.04

    steps:
      - name: Checkout 🛎️
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # - name: Bump Version 🏷️
      #   id: bump
      #   uses: opspresso/action-builder@master
      #   with:
      #     args: --version

      # - name: Release Version 🚀
      #   uses: opspresso/action-builder@master
      #   with:
      #     args: --release
      #   env:
      #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      #     TAG_NAME: ${{ steps.bump.outputs.version }}

      # - name: Set up QEMU 🐳
      #   uses: docker/setup-qemu-action@v3

      # - name: Set up Docker Buildx 🐳
      #   id: buildx
      #   uses: docker/setup-buildx-action@v3

      - name: Configure AWS Credentials 🔑
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_ROLE_ARN }}
          role-session-name: github-actions-ci-bot
          aws-region: ${{ env.AWS_REGION }}

      # - name: Login to Amazon ECR 🔑
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2

      # - name: Build and push 🐳
      #   uses: docker/build-push-action@v6
      #   with:
      #     context: .
      #     platforms: ${{ env.PLATFORM }}
      #     push: true
      #     tags: ${{ env.ECR_URI }}
      #     provenance: false  # Docker V2 Schema 2 형식으로 강제 적용 (OCI 형식 비활성화)

      # - name: Setup Node.js 🔧
      #   uses: actions/setup-node@v3
      #   with:
      #     node-version: '20'

      # - name: Install dependencies 📦
      #   run: |
      #     npm install

      - name: Install serverless plugin 📦
        run: |
          npx serverless plugin install -n serverless-dotenv-plugin
          npx serverless plugin install -n serverless-plugin-warmup

      - name: Set up environment variables 📝
        env:
          AUTH_FACEBOOK_ID: ${{ secrets.AUTH_FACEBOOK_ID }}
          AUTH_FACEBOOK_SECRET: ${{ secrets.AUTH_FACEBOOK_SECRET }}
          AUTH_GITHUB_ID: ${{ secrets.AUTH_GITHUB_ID }}
          AUTH_GITHUB_SECRET: ${{ secrets.AUTH_GITHUB_SECRET }}
          AUTH_GOOGLE_ID: ${{ secrets.AUTH_GOOGLE_ID }}
          AUTH_GOOGLE_SECRET: ${{ secrets.AUTH_GOOGLE_SECRET }}
          AUTH_SECRET: ${{ secrets.AUTH_SECRET }}
        run: |
          echo "AUTH_FACEBOOK_ID=${AUTH_FACEBOOK_ID}" >> .env
          echo "AUTH_FACEBOOK_SECRET=${AUTH_FACEBOOK_SECRET}" >> .env
          echo "AUTH_GITHUB_ID=${AUTH_GITHUB_ID}" >> .env
          echo "AUTH_GITHUB_SECRET=${AUTH_GITHUB_SECRET}" >> .env
          echo "AUTH_GOOGLE_ID=${AUTH_GOOGLE_ID}" >> .env
          echo "AUTH_GOOGLE_SECRET=${AUTH_GOOGLE_SECRET}" >> .env
          echo "AUTH_SECRET=${AUTH_SECRET}" >> .env
          echo "NODE_ENV=${NODE_ENV}" >> .env

      - name: Serverless Deploy 🚀
        run: |
          npx serverless deploy --region ${{ env.AWS_REGION }}
